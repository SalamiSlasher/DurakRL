[tool.mypy]
# Project files
exclude = '^(venv|scripts)/'
mypy_path = ["./stubs"]

# Display options
pretty = true
color_output = true
show_error_codes = true
show_column_numbers = true
show_absolute_path = false
error_summary = true

# Incremental mode
incremental = true

# Warning options
warn_return_any = true
warn_unreachable = true
warn_redundant_casts = true
warn_unused_ignores = true

# Type checking options
strict = true
check_untyped_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_subclassing_any = true
disallow_any_generics = true
no_implicit_reexport = true
extra_checks = true

# Error codes
enable_error_code = [
    "redundant-self",
    "comparison-overlap",
    "narrowed-type-not-subtype",
    "unimported-reveal",
    "mutable-override",
    "unused-awaitable",
    "ignore-without-code",
    "truthy-iterable",
    "truthy-bool",
    "possibly-undefined",
    "redundant-expr",
    "unreachable",
    "redundant-self",
    "redundant-cast"
]

# Platform and Python version
#platform = "linux"
python_version = "3.12"


[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true


[tool.ruff]
# Project files
exclude = ["scripts", ".venv", "src/powerbi", "stubs"]
indent-width = 4
line-length = 80
output-format = "concise"
preview = true  # unstable
respect-gitignore = false
show-fixes = true
target-version = "py312"

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 60
indent-style = "space"
line-ending = "auto"
preview = true  # unstable
quote-style = "single"
skip-magic-trailing-comma = true

[tool.ruff.lint]
fixable = ["ALL"]
ignore = [
    "E501",    # line too long
    "RUF001",  # ambigios char
    "RUF002",  # ambigios char in docs
    "RUF003",  # ambigios char in comments
    "D",       # documentation
    "DOC",     # doc format
    "ERA001",  # commented out code
    "COM812",  # missing trailing comma
    "ISC001",  # implicit string concat
    "DTZ",     # timezone
    "TCH",     # annotations
    "T20",     # print
]
logger-objects = ["mylogger.logger", "assp_logger.logger", "src.assp_logger.logger"]
preview = true
select = [
    "F",      # pyflakes
    "E",      # pycodestyle error
    "W",      # pycodestyle warning
    "C90",    # mccabe  # complexity
    "I",      # isort
    "N",      # pep8-naming
    "D",      # pydocstyle
    "UP",     # pyupgrade
    "YTT",    # flake8-2020  # sys version info
    "ANN",    # flake8-annotations
    "ASYNC",  # flake8-async
    "S",      # flake8-bandit
    "BLE",    # flake8-blind-except
    "FBT",    # flake8-boolean-trap
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "DJ",     # flake8-django
    "EM",     # flake8-errmsg
    "EXE",    # flake8-executable
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "LOG",    # flake8-logging
    "G",      # flake8-logging-format
    "INP",    # flake8-no-pep420
    "PIE",    # flake8-pie
    "T20",    # flake8-print
    "PYI",    # flake8-pyi
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "INT",    # flake8-gettext
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "TD",     # flake8-todos
    "FIX",    # flake8-fixme_
    "ERA",    # eradicate
    "PD",     # pandas-vet
    "PGH",    # pygrep-hooks
    "PLC",    # Pylint Convention
    "PLE",    # Pylint Error
    "PLR",    # Pylint Refactor
    "PLW",    # Pylint Warning
    "TRY",    # tryceratops
    "FLY",    # flynt
    "NPY",    # NumPy-specific rules
    "FAST",   # FastAPI
    "AIR",    # Airflow
    "PERF",   # Perflint
    "FURB",   # refurb
    "DOC",    # pydoclint
    "RUF",    # Ruff-specific rules
]
task-tags = ["HACK", "TODO", "FIXME", "XXX"]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = false
ignore-fully-untyped = false
mypy-init-return = false
suppress-dummy-args = false
suppress-none-returning = false

[tool.ruff.lint.flake8-bandit]
check-typed-exception = false
hardcoded-tmp-directory = []

[tool.ruff.lint.flake8-boolean-trap]
extend-allowed-calls = []

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = []

[tool.ruff.lint.flake8-builtins]
builtins-allowed-modules = ["id"]
builtins-ignorelist = ["id"]

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.flake8-errmsg]
max-string-length = 20

[tool.ruff.lint.flake8-implicit-str-concat]
allow-multiline = true

[tool.ruff.lint.flake8-import-conventions]
banned-from = ["sqlalchemy", "datetime"]
[tool.ruff.lint.flake8-import-conventions.aliases]
sqlalchemy = "sa"
[tool.ruff.lint.flake8-import-conventions.banned-aliases]
"tensorflow.keras.backend" = ["K"]
[tool.ruff.lint.flake8-import-conventions.extend-aliases]
"dask.dataframe" = "dd"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = true
mark-parentheses = true
parametrize-names-type = "tuple"
parametrize-values-row-type = "tuple"
parametrize-values-type = "tuple"
raises-extend-require-match-for = ["requests.RequestException"]
raises-require-match-for = ["requests.RequestException"]

[tool.ruff.lint.flake8-quotes]
avoid-escape = true
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.lint.flake8-self]
extend-ignore-names = ["Base"]
ignore-names = ["_new"]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"
banned-module-level-imports = ["torch", "tensorflow"]

[tool.ruff.lint.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions"]
runtime-evaluated-base-classes = ["pydantic.BaseModel", "sqlalchemy.orm.DeclarativeBase"]
runtime-evaluated-decorators = ["pydantic.validate_call", "attrs.define"]
strict = true

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = false

[tool.ruff.lint.isort]
case-sensitive = false
classes = []
combine-as-imports = false
constants = []
detect-same-package = true
force-single-line = true
force-sort-within-sections = false
force-wrap-aliases = false
forced-separate = ["testing"]
from-first = true
lines-between-types = 1
no-lines-before = ["future"]
order-by-type = true
relative-imports-order = "closest-to-furthest"
required-imports = ["from __future__ import annotations"]
section-order = [
    "future",
    "typing",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
    "testing"
]
split-on-trailing-comma = false

[tool.ruff.lint.isort.sections]
"testing" = ["pytest", "hypothesis", "unittest"]
"typing" = ["typing", "typing_extensions", "types", "collections.abc"]
"django" = ["django", "rest_framework"]

[tool.ruff.lint.mccabe]
max-complexity = 8

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "pydantic.field_validator",
    "pydantic.model_validator",
]
staticmethod-decorators = [
    "pydantic.field_serializer",
]

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = false
max-line-length = 80
max-doc-length = 120

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.pyflakes]
extend-generics = []

[tool.ruff.lint.pylint]
allow-dunder-method-names = ["__tablename__"]
allow-magic-value-types = []
max-args = 6
max-bool-expr = 5
max-branches = 10
max-locals = 10
max-nested-blocks = 5
max-positional-args = 5
max-public-methods = 20
max-returns = 5
max-statements = 50

[tool.ruff.lint.ruff]
parenthesize-tuple-in-subscript = false
